{
	"name": "dataflow6",
	"properties": {
		"folder": {
			"name": "Test"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "test"
				},
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "test2"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          way_osm_id as long,",
				"          arr as string[]",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     query: 'select way_osm_id, array_agg(node_uuid) as arr\\nfrom way_point_stagging ps\\ngroup by way_osm_id',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_COMMITTED') ~> source1",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          osm_id as long,",
				"          points as string[]",
				"     ),",
				"     format: 'table',",
				"     tableName: 'test',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          osm_id = way_osm_id,",
				"          points = arr",
				"     )) ~> test",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          osm_id as long,",
				"          points as string[]",
				"     ),",
				"     format: 'table',",
				"     tableName: 'test2',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          osm_id = way_osm_id,",
				"          points = arr",
				"     )) ~> test2"
			]
		}
	}
}