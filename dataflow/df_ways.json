{
	"name": "df_ways",
	"properties": {
		"folder": {
			"name": "Test"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "ways"
				},
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "pointstagging"
				},
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "lines"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzurePostgreSql1",
						"type": "LinkedServiceReference"
					},
					"name": "linestagging"
				}
			],
			"transformations": [
				{
					"name": "waypointsstagging"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          nodeid as long,",
				"          wayid as long,",
				"          tags as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     query: 'select  unnest(w.nodes) as nodeid, w.id as wayId, cast(cast(w.tags as hstore) as json) as tags from planet_osm_ways w',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_COMMITTED') ~> ways",
				"source(output(",
				"          uu_id as string,",
				"          osm_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     query: 'select uu_id , osm_id  from point_stagging ps ',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_COMMITTED') ~> pointstagging",
				"source(output(",
				"          osm_id as long,",
				"          way as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     query: 'select abs(osm_id) as osm_id , ST_AsText(way) as way from planet_osm_line pol ',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_COMMITTED') ~> lines",
				"ways, pointstagging join(nodeid == osm_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> waypointsstagging",
				"waypointsstagging aggregate(groupBy(wayid,",
				"          tags),",
				"     nodesArray = collect(uu_id)) ~> aggregate1",
				"aggregate1, lines join(wayid == osm_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(uuid = uuid()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          osm_id as long,",
				"          pointstext as string[],",
				"          pointsuuid as string[],",
				"          layer as string,",
				"          attributes as string,",
				"          metadata as string,",
				"          geometrytext as string,",
				"          geometry as string",
				"     ),",
				"     format: 'table',",
				"     tableName: 'line_stagging',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id = uuid,",
				"          osm_id = wayid,",
				"          attributes = tags,",
				"          pointstext = nodesArray,",
				"          geometrytext = way",
				"     )) ~> linestagging"
			]
		}
	}
}