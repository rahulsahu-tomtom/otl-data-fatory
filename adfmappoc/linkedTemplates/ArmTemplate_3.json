{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfmappoc"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_way_point_agg_admin_process_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "way > point agg ",
				"folder": {
					"name": "France_Admin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql3",
								"type": "LinkedServiceReference"
							},
							"name": "ways"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql3",
								"type": "LinkedServiceReference"
							},
							"name": "pointstagging"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql3",
								"type": "LinkedServiceReference"
							},
							"name": "linepointagg"
						}
					],
					"transformations": [
						{
							"name": "waypointsstagging"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          nodeid as long,",
						"          wayid as long,",
						"          tags as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select  unnest(w.nodes) as nodeid, w.id as wayId, cast(cast(w.tags as hstore) as json) as tags from planet_osm_ways w',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> ways",
						"source(output(",
						"          uu_id as string,",
						"          osm_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select uu_id , osm_id  from point_stagging ps ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> pointstagging",
						"ways, pointstagging join(nodeid == osm_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> waypointsstagging",
						"waypointsstagging aggregate(groupBy(wayid,",
						"          tags),",
						"     nodesArray = collect(uu_id)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          way_osm_id as long,",
						"          points as string[],",
						"          attributes as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'line_point_agg',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          way_osm_id = wayid,",
						"          attributes = tags,",
						"          points = nodesArray",
						"     )) ~> linepointagg"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_way_point_agg_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "way > point agg ",
				"folder": {
					"name": "India_Postal"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "ways"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "pointstagging"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "lines"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "aggtest"
						}
					],
					"transformations": [
						{
							"name": "waypointsstagging"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          nodeid as long,",
						"          wayid as long,",
						"          tags as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select  unnest(w.nodes) as nodeid, w.id as wayId, cast(cast(w.tags as hstore) as json) as tags\\nfrom planet_osm_ways w',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> ways",
						"source(output(",
						"          uu_id as string,",
						"          osm_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select uu_id , osm_id  from point_stagging ps ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> pointstagging",
						"source(output(",
						"          osm_id as long,",
						"          way as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select abs(osm_id) as osm_id , way  from planet_osm_line pol ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> lines",
						"ways, pointstagging join(nodeid == osm_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> waypointsstagging",
						"waypointsstagging aggregate(groupBy(wayid,",
						"          tags),",
						"     nodesArray = collect(uu_id)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          way_osm_id as long,",
						"          points as string[],",
						"          attributes as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'line_point_agg',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          way_osm_id = wayid,",
						"          attributes = tags,",
						"          points = nodesArray",
						"     )) ~> aggtest"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ways')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "ways"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "pointstagging"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "lines"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "linestagging"
						}
					],
					"transformations": [
						{
							"name": "waypointsstagging"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          nodeid as long,",
						"          wayid as long,",
						"          tags as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select  unnest(w.nodes) as nodeid, w.id as wayId, cast(cast(w.tags as hstore) as json) as tags from planet_osm_ways w',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> ways",
						"source(output(",
						"          uu_id as string,",
						"          osm_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select uu_id , osm_id  from point_stagging ps ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> pointstagging",
						"source(output(",
						"          osm_id as long,",
						"          way as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select abs(osm_id) as osm_id , ST_AsText(way) as way from planet_osm_line pol ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> lines",
						"ways, pointstagging join(nodeid == osm_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> waypointsstagging",
						"waypointsstagging aggregate(groupBy(wayid,",
						"          tags),",
						"     nodesArray = collect(uu_id)) ~> aggregate1",
						"aggregate1, lines join(wayid == osm_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(uuid = uuid()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          osm_id as long,",
						"          pointstext as string[],",
						"          pointsuuid as string[],",
						"          layer as string,",
						"          attributes as string,",
						"          metadata as string,",
						"          geometrytext as string,",
						"          geometry as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'line_stagging',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     stagingSchemaName: '',",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id = uuid,",
						"          osm_id = wayid,",
						"          attributes = tags,",
						"          pointstext = nodesArray,",
						"          geometrytext = way",
						"     )) ~> linestagging"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ways_test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "ways"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "pointstagging"
						},
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzurePostgreSql1",
								"type": "LinkedServiceReference"
							},
							"name": "waypointstagging"
						}
					],
					"transformations": [
						{
							"name": "waypointsjoin"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          nodeid as long,",
						"          wayid as long,",
						"          tags as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select  unnest(w.nodes) as nodeid, w.id as wayId, cast(cast(w.tags as hstore) as json) as tags\\nfrom planet_osm_ways w',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> ways",
						"source(output(",
						"          uu_id as string,",
						"          osm_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select uu_id , osm_id  from point_stagging ps ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> pointstagging",
						"source(output(",
						"          osm_id as long,",
						"          waygeomtext as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select  abs(osm_id) as osm_id , ST_AsText(way) as waygeomtext  from planet_osm_line pol ',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_COMMITTED') ~> source1",
						"ways, pointstagging join(nodeid == osm_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> waypointsjoin",
						"waypointsjoin, source1 join(wayid == source1@osm_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          node_uuid as string,",
						"          node_osm_id as long,",
						"          way_osm_id as long,",
						"          attributes as string,",
						"          geometry as string,",
						"          geometrytext as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'way_point_stagging',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     postSQLs:['update way_point_stagging\\nset geometry = ST_GeomFromText(geometrytext)'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          attributes = tags,",
						"          node_osm_id = nodeid,",
						"          way_osm_id = wayid,",
						"          node_uuid = uu_id,",
						"          geometrytext = waygeomtext",
						"     )) ~> waypointstagging"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/allpoints')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "allpoints",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "allpointsflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"point": {},
									"pointsink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dataset_Input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"pointsource": {},
									"pointdestination": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "persondataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"person1": {},
									"person2": {},
									"person12": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"points": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df6",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"test": {},
									"test2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_admin_center_admin_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "OSM point > postal point",
				"activities": [
					{
						"name": "df_admin_center_admin_process",
						"description": "OSM point > area center",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_admin_center_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"osmpoint": {},
									"pointstagging": {},
									"postalpointstagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdminProcessPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-30T13:18:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_admin_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_point_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_point_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"osmnode": {},
									"pointstagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_admin_center_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_point_admin_process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_admin_center_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"osmpoint": {},
									"pointstagging": {},
									"postalpointstagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_area_polygon_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_admin_center_admin_process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_area_polygon_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"osmpolygon": {},
									"polygonstagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_addressable_area_stagging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_area_polygon_admin_process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_addressable_area_stagging",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"admincenter": {},
									"label": {},
									"releation": {},
									"polygonstagging": {},
									"addressableareastagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_way_point_agg_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_addressable_area_stagging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_way_point_agg_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ways": {},
									"pointstagging": {},
									"linepointagg": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_line_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_way_point_agg_admin_process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_line_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"linepointagg": {},
									"lines": {},
									"aggtestfinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_lines_area_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_line_admin_process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_lines_area_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"rels": {},
									"addressableareastagging": {},
									"lineareastagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdminProcessPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-01T17:47:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_area_polygon_admin_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "osm polygon > postal polygon",
				"activities": [
					{
						"name": "df_area_polygon_admin_process",
						"description": "osm polygon > postal polygon",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_area_polygon_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"osmpolygon": {},
									"polygonstagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdminProcessPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-30T13:35:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_area_stagging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_area_stagging",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_area_stagging",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"osmarea": {},
									"polygonstagging": {},
									"postalpointstaging": {},
									"areastagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_addressable_area_stagging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_addressable_area_stagging",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_addressable_area_stagging",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"admincenter": {},
									"label": {},
									"releation": {},
									"polygonstagging": {},
									"addressableareastagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdminProcessPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-01T08:58:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_ways_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_ways_test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ways_test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ways": {},
									"pointstagging": {},
									"source1": {},
									"waypointstagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ways_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_line_admin_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_line_admin_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_line_admin_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"linepointagg": {},
									"lines": {},
									"aggtestfinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdminProcessPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:28:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_line_postal_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_line_postal_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_line_postal_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"linepointagg": {},
									"points": {},
									"aggtestfinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PostalProcessPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-28T13:17:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_linegeoom')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_linegeom",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_linegeom",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"aggtest": {},
									"points": {},
									"aggtestfinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lines_area')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_lines_area",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_lines_area",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"rels": {},
									"postalareastagging": {},
									"lineareastagging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T11:33:46Z"
			},
			"dependsOn": []
		}
	]
}